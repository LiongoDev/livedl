--- src/niconico/nico_hls.go.old	2020-04-30 23:08:42.843431952 +0900
+++ src/niconico/nico_hls.go	2020-06-26 21:05:32.848716244 +0900
@@ -49,6 +49,8 @@
 	position float64
 }
 type NicoHls struct {
+	wsapi int
+
 	startDelay int
 	playlist playlist
 
@@ -115,8 +117,7 @@
 
 	broadcastId, ok := prop["broadcastId"].(string)
 	if !ok {
-		err = fmt.Errorf("broadcastId is not string")
-		return
+		broadcastId = "0"
 	}
 
 	webSocketUrl, ok := prop["//webSocketUrl"].(string)
@@ -125,6 +126,12 @@
 		return
 	}
 
+	wsapi := 2
+	if m := regexp.MustCompile(`/wsapi/v1/`).FindStringSubmatch(webSocketUrl); len(m) > 0 {
+		wsapi = 1
+		log.Println("wsapi: 1")
+	}
+
 	myUserId, _ := prop["//myId"].(string)
 	if myUserId == "" {
 		myUserId = "NaN"
@@ -135,7 +142,14 @@
 		timeshift = true
 	}
 
-
+	if wsapi == 2 && false && ! timeshift {
+		if m := regexp.MustCompile(`/watch/([^?]+)`).FindStringSubmatch(webSocketUrl); len(m) > 0 {
+			broadcastId = m[1]
+		}
+		webSocketUrl = strings.Replace(webSocketUrl, "/wsapi/v2/", "/wsapi/v1/", 1)
+		wsapi = 1
+		log.Println("wsapi: 1")
+	}
 
 	var pid string
 	if nicoliveProgramId, ok := prop["nicoliveProgramId"]; ok {
@@ -248,6 +262,8 @@
 	files.MkdirByFileName(dbName)
 
 	hls = &NicoHls{
+		wsapi: wsapi,
+
 		broadcastId: broadcastId,
 		webSocketUrl: webSocketUrl,
 		myUserId: myUserId,
@@ -1544,6 +1560,10 @@
 	})
 }
 func (hls *NicoHls) startMain() {
+	if hls.wsapi == 1 {
+		hls.startMainV1()
+		return
+	}
 
 	// エラー時はMAIN_*を返すこと
 	hls.startPGoroutine(func(sig <-chan struct{}) int {
@@ -1599,39 +1619,18 @@
 		})
 
 		err = writeJson(OBJ{
-			"type": "watch",
-			"body": OBJ{
-				"command": "playerversion",
-				"params": []string{
-					"leo",
+			"type": "startWatching",
+			"data": OBJ{
+				"stream": OBJ{
+					"quality": hls.quality, //"abr", // high
+					"protocol": "hls",
+					"latency": "high",
 				},
-			},
-		})
-		if err != nil {
-			if (! hls.interrupted()) {
-				log.Println("websocket playerversion write:", err)
-			}
-			return NETWORK_ERROR
-		}
-
-		err = writeJson(OBJ{
-			"type": "watch",
-			"body": OBJ{
-				"command": "getpermit",
-				"requirement": OBJ{
-					"broadcastId": hls.broadcastId,
-					"room": OBJ{
-						"isCommentable": true,
-						"protocol": "webSocket",
-					},
-					"route": "",
-					"stream": OBJ{
-						"isLowLatency": false,
-						"priorStreamQuality": hls.quality, //"abr", // high
-						"protocol": "hls",
-						"requireNewStream": true,
-					},
+				"room": OBJ{
+					"protocol": "webSocket",
+					"commentable": true,
 				},
+				"reconnect": true,
 			},
 		})
 		if err != nil {
@@ -1669,15 +1668,16 @@
 				continue
 			}
 			switch _type {
-			case "watch":
-				if cmd, ok := objs.FindString(res, "body", "command"); ok {
-					switch cmd {
-					case "watchinginterval":
-						if arr, ok := objs.FindArray(res, "body", "params"); ok {
+			//case "watch":
+				//if cmd, ok := objs.FindString(res, "body", "command"); ok {
+					//switch cmd {
+					case "seat":
+						if _arr, ok := objs.FindFloat64(res, "data", "keepIntervalSec"); ok {
+							arr := []interface{}{ _arr }
 							for _, intf := range arr {
-								if str, ok := intf.(string); ok {
-									num, e := strconv.Atoi(str)
-									if e == nil && num > 0 {
+								if str, ok := intf.(float64); ok {
+									num := int(str)
+									if num > 0 {
 										//hls.SetInterval(num)
 										watchinginterval = num
 										break
@@ -1693,15 +1693,7 @@
 									select {
 									case <-time.After(time.Duration(watchinginterval) * time.Second):
 										err := writeJson(OBJ{
-											"type": "watch",
-											"body": OBJ{
-												"command": "watching",
-												"params": []string{
-													hls.broadcastId,
-													"-1",
-													"0",
-												},
-											},
+											"type": "keepSeat",
 										})
 										if err != nil {
 											if (! hls.interrupted()) {
@@ -1716,8 +1708,8 @@
 							})
 						}
 
-					case "currentstream":
-						if uri, ok := objs.FindString(res, "body", "currentStream", "uri"); ok {
+					case "stream":
+						if uri, ok := objs.FindString(res, "data", "uri"); ok {
 							if (! playlistStarted) && uri != "" {
 								playlistStarted = true
 								hls.startPlaylist(uri)
@@ -1726,7 +1718,8 @@
 
 					case "disconnect":
 						// print params
-						if arr, ok := objs.FindArray(res, "body", "params"); ok {
+						if _arr, ok := objs.FindString(res, "data", "reason"); ok {
+							arr := []interface{}{ 0, _arr }
 							fmt.Printf("%v\n", arr)
 							if len(arr) >= 2 {
 								if s, ok := arr[1].(string); ok {
@@ -1745,13 +1738,13 @@
 						}
 						return MAIN_DISCONNECT
 
-					case "currentroom":
+					case "room":
 						// comment
-						messageServerUri, ok := objs.FindString(res, "body", "room", "messageServerUri")
+						messageServerUri, ok := objs.FindString(res, "data", "messageServer", "uri")
 						if !ok {
 							break
 						}
-						threadId, ok := objs.FindString(res, "body", "room", "threadId")
+						threadId, ok := objs.FindString(res, "data", "threadId")
 						if !ok {
 							break
 						}
@@ -1761,19 +1754,19 @@
 
 					case "statistics":
 					case "permit":
-					case "servertime":
+					case "serverTime":
 					case "schedule":
 						// nop
-					default:
-						fmt.Printf("%#v\n", res)
-						fmt.Printf("unknown command: %s\n", cmd)
-					} // end switch "command"
-				}
+					//default:
+					//	fmt.Printf("%#v\n", res)
+					//	fmt.Printf("unknown command: %s\n", cmd)
+					//} // end switch "command"
+				//}
+				// "watch"
 
 			case "ping":
 				err := writeJson(OBJ{
 					"type": "pong",
-					"body": OBJ{},
 				})
 				if err != nil {
 					if (! hls.interrupted()) {
@@ -1782,7 +1775,7 @@
 					return NETWORK_ERROR
 				}
 			case "error":
-				code, ok := objs.FindString(res, "body", "code")
+				code, ok := objs.FindString(res, "data", "code")
 				if (! ok) {
 					log.Printf("Unknown error: %#v\n", res)
 					return ERROR_SHUTDOWN
@@ -1837,6 +1830,9 @@
 		return OK
 	})
 }
+func (hls *NicoHls) startMainV1() {
+	return // old startMain
+}
 
 func (hls *NicoHls) serve(hlsPort int) {
 	hls.startMGoroutine(func(sig <-chan struct{}) int {
@@ -2250,7 +2246,6 @@
 
 	} else {
 		for _, k := range []string{
-			"broadcastId",
 			"//webSocketUrl",
 			//"//myId",
 		} {
